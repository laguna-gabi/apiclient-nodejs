name: Pandora

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Lint
    runs-on: self-hosted
    timeout-minutes: 3
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v2
      - name: Install node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Install yarn
        run: npm install -g yarn
      - name: Install project dependencies
        run: yarn install --frozen-lockfile
      - name: Run linters
        run: yarn lint

  build-test-coverage:
    name: Build, Test and Coverage
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v2
      - name: Install node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Install yarn
        run: npm install -g yarn
      - name: Create npmrc and yarnrc files
        run: echo "//npm.pkg.github.com/:_authToken=${{secrets.NPM_PRIVATE_GITHUB_AUTH_TOKEN_REGISTRY}}" > ~/.npmrc
      - name: Install project dependencies
        run: yarn install --frozen-lockfile
      - name: Build project
        run: yarn tsc
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Test
        run: yarn test:cov
      - name: Zip lcov-report
        uses: papeloto/action-zip@v1
        with:
          files: coverage/lcov-report
          dest: coverage.zip
      - name: Upload coverage zip
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage.zip
      - name: Remove lcov-report before uploading to S3
        run: |
          rm coverage.zip
          rm -rf coverage/lcov-report
      - name: Get local coverage report
        if: github.ref != 'refs/heads/master'
        id: localCoverage
        uses: notiz-dev/github-action-json-property@release
        with:
          path: './coverage/coverage-summary.json'
          prop_path: 'total.lines.pct'
      - name: Download master coverage report from S3
        if: github.ref != 'refs/heads/master'
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: 's3://${{ secrets.COVERAGE_AWS_BUCKET }}/master/coverage-summary.json'
          dest: './coverage/master/coverage-summary.json'
      - name: Get master coverage report
        if: github.ref != 'refs/heads/master'
        id: masterCoverage
        uses: notiz-dev/github-action-json-property@release
        with:
          path: './coverage/master/coverage-summary.json'
          prop_path: 'total.lines.pct'
      - name: Set coverage diff
        if: github.ref != 'refs/heads/master'
        run: echo "DIFF_COV=$(echo "${{steps.localCoverage.outputs.prop}}-${{steps.masterCoverage.outputs.prop}}" | bc)" >> $GITHUB_ENV
      - name: Add coverage diff to PR
        if: github.ref != 'refs/heads/master'
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: |
            ### coverage diff `${{ github.head_ref }}` -> `master`
            ___
            | **Total** | **${{steps.localCoverage.outputs.prop}}% (${{ env.DIFF_COV }}%)** | **[lcov report](https://github.com/LagunaHealth/pandora/actions/runs/${{ github.run_id }})** |
            |-----------|-------------------------------------------------------------------|---------------------------------------------------------------------------------------------|
          allow-repeats: false
      - name: Remove master coverage from S3 if exists (only on master branch)
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: vitorsgomes/s3-rm-action@master
        with:
          args: --recursive
        env:
          AWS_S3_BUCKET: ${{ secrets.COVERAGE_AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.COVERAGE_AWS_REGION }}
          PATH_TO_DELETE: 'master'
      - name: Upload master coverage to S3 (only on master branch)
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ secrets.COVERAGE_AWS_BUCKET }}
          source_dir: './coverage'
          destination_dir: 'master'
      - name: Cleanup docker
        run: docker system prune -a --volumes --force

  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: build-test-coverage
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    timeout-minutes: 2
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v2
      - name: Install node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Install yarn
        run: npm install -g yarn
      - name: Install project dependencies
        run: yarn install --frozen-lockfile
      - name: Build project
        run: yarn tsc
      - name: deploy
        run: yarn publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  bump-version:
    name: Bump Version
    runs-on: self-hosted
    needs: deploy
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: cat package.json
        run: cat ./package.json
      - name: Automated Version Bump
        id: version-bump
        uses: phips28/gh-action-bump-version@master
        with:
          tag-prefix: 'v'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: cat package.json
        run: cat ./package.json
      - name: Output Step
        env:
          NEW_TAG: ${{ steps.version-bump.outputs.newTag }}
        run: echo "new tag $NEW_TAG"
