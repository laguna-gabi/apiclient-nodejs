name: Laguna Auto

on:
  push:
    branches:
      - develop
      - staging
      - master
  pull_request:
    branches:
      - develop

jobs:
  whitesource:
    name: Code Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Whitesource Scan
        uses: TheAxZim/Whitesource-Scan-Action@v1.0.0
        with:
          wssUrl: https://saas-eu.whitesourcesoftware.com/agent
          apiKey: ${{ secrets.WHITESOURCE_API_KEY }}
          productName: 'Backend'
          projectName: 'Argus'

  lint:
    name: Lint
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: Install node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Checkout Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install packages
        run: yarn install
      - name: Init Nx BASE and HEAD
        uses: ./.github/actions/set-nx-affected
      - name: Lint affected
        run: npx nx affected --target=lint --base=$NX_BASE --head=$NX_HEAD --parallel=1

  test:
    name: Test
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: Install node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Checkout Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install packages
        run: yarn install
      - name: Start docker image with mongodb to localhost and test db
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 10
      - name: Configure localstack
        run: npx nx localstack
      - name: Init Nx BASE and HEAD
        uses: ./.github/actions/set-nx-affected
      - name: Test affected
        run: npx nx affected --target=test:cov --base=$NX_BASE --head=$NX_HEAD --parallel=3
      - name: Cleanup docker
        if: ${{ always() }}
        run: |
          docker-compose down
          docker system prune -a --volumes --force

  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: [lint, test]
    timeout-minutes: 30
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master'
    steps:
      - name: Install node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Checkout Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install packages
        run: yarn install
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5
      - name: Init Nx BASE and HEAD
        uses: ./.github/actions/set-nx-affected
      - name: Build affected
        run: npx nx affected --target=build --base=$NX_BASE --head=$NX_HEAD --parallel=3
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Deploy affected
        run: npx nx affected --target=deploy --base=$NX_BASE --head=$NX_HEAD --parallel=3 --slackChannel=${{secrets.SLACK_URL_MESSAGES}}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          CURRENT_BRANCH: ${{ steps.branch-name.outputs.current_branch }}
      - name: Cleanup docker
        if: ${{ always() }}
        run: |
          docker-compose down
          docker system prune -a --volumes --force

  migrate:
    name: Migrate
    runs-on: self-hosted
    needs: deploy
    timeout-minutes: 5
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master'
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5
      - name: Checkout Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Install packages
        run: yarn install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Accumulate NODE_ENV
        id: branch_check
        run: |
          if [ "${{ steps.branch-name.outputs.current_branch }}" = "master" ]; then
            echo "::set-output name=env_name::production"
          elif [ "${{ steps.branch-name.outputs.current_branch }}" = "staging" ]; then
            echo "::set-output name=env_name::production"
          elif [ "${{ steps.branch-name.outputs.current_branch }}" = "develop" ]; then
            echo "::set-output name=env_name::develop"
          fi
      - name: Init Nx BASE and HEAD
        uses: ./.github/actions/set-nx-affected
      - name: Migrate Db
        env:
          NODE_ENV: ${{ steps.branch_check.outputs.env_name }}
        run: npx nx affected --target=command --cmd=migration --options=up --base=$NX_BASE --head=$NX_HEAD --parallel=3
      - name: Cleanup docker
        if: ${{ always() }}
        run: |
          docker-compose down
          docker system prune -a --volumes --force
